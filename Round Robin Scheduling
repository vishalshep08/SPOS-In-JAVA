import java.util.*;

class Process {
    int pid;
    int arrivalTime;
    int burstTime;
    int priority;
    int completionTime;
    int turnaroundTime;
    int waitingTime;
    int remainingTime;

    // Constructor
    public Process(int pid, int arrivalTime, int burstTime, int priority) {
        this.pid = pid;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
        this.completionTime = 0;
        this.turnaroundTime = 0;
        this.waitingTime = 0;
        this.remainingTime = burstTime;
    }
}

public class RoundRobinScheduler {

    // Round Robin Scheduling Method
    public static List<Process> roundRobin(List<Process> processes, int timeQuantum) {
        int time = 0;
        int completed = 0;
        int n = processes.size();
        List<Process> queue = new ArrayList<>();

        // Add processes that have arrived at the start time
        for (Process p : processes) {
            if (p.arrivalTime <= time) {
                queue.add(p);
            }
        }

        while (completed < n) {
            if (!queue.isEmpty()) {
                Process process = queue.remove(0);
                if (process.remainingTime > timeQuantum) {
                    time += timeQuantum;
                    process.remainingTime -= timeQuantum;
                } else {
                    time += process.remainingTime;
                    process.remainingTime = 0;
                    process.completionTime = time;
                    process.turnaroundTime = process.completionTime - process.arrivalTime;
                    process.waitingTime = process.turnaroundTime - process.burstTime;
                    completed++;
                }
                // Add new processes that have arrived during this time
                for (Process p : processes) {
                    if (p.arrivalTime <= time && !queue.contains(p) && p.remainingTime > 0) {
                        queue.add(p);
                    }
                }
                if (process.remainingTime > 0) {
                    queue.add(process);
                }
            } else {
                time++;
                for (Process p : processes) {
                    if (p.arrivalTime <= time && !queue.contains(p) && p.remainingTime > 0) {
                        queue.add(p);
                    }
                }
            }
        }

        return processes;
    }

    // Calculate Averages for Turnaround Time and Waiting Time
    public static void calculateAverages(List<Process> processes) {
        double totalTurnaroundTime = 0;
        double totalWaitingTime = 0;
        int n = processes.size();

        for (Process p : processes) {
            totalTurnaroundTime += p.turnaroundTime;
            totalWaitingTime += p.waitingTime;
        }

        double avgTurnaroundTime = totalTurnaroundTime / n;
        double avgWaitingTime = totalWaitingTime / n;

        System.out.printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
        System.out.printf("Average Waiting Time: %.2f\n", avgWaitingTime);
    }

    // Display Results
    public static void displayResults(List<Process> processes, String algorithmName) {
        System.out.println("\n" + algorithmName + ":");
        System.out.printf("%-10s%-10s%-10s%-10s%-15s%-15s%-10s\n", "PID", "Arrival", "Burst", "Priority", "Completion", "Turnaround", "Waiting");

        for (Process p : processes) {
            System.out.printf("%-10d%-10d%-10d%-10d%-15d%-15d%-10d\n", p.pid, p.arrivalTime, p.burstTime, p.priority, p.completionTime, p.turnaroundTime, p.waitingTime);
        }

        // Calculate and display averages
        calculateAverages(processes);
    }

    // Main Method
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int numProcesses = sc.nextInt();
        List<Process> processes = new ArrayList<>();

        // Read processes details
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter arrival time for process " + (i + 1) + ": ");
            int arrivalTime = sc.nextInt();
            System.out.print("Enter burst time for process " + (i + 1) + ": ");
            int burstTime = sc.nextInt();
            System.out.print("Enter priority for process " + (i + 1) + " (optional, enter 0 if not applicable): ");
            int priority = sc.nextInt();
            processes.add(new Process(i + 1, arrivalTime, burstTime, priority));
        }

        // Round Robin Scheduling
        List<Process> rrResult = roundRobin(processes, 2);  // Time Quantum = 2
        displayResults(rrResult, "Round Robin (Time Quantum = 2)");

        sc.close();
    }
}

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

class Process {
    int pid, arrivalTime, burstTime, priority, completionTime, turnaroundTime, waitingTime, remainingTime;

    public Process(int pid, int arrivalTime, int burstTime, int priority) {
        this.pid = pid;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
        this.completionTime = 0;
        this.turnaroundTime = 0;
        this.waitingTime = 0;
        this.remainingTime = burstTime;
    }
}

public class PrioritySchedulingNonPreemptive {

    public static List<Process> priorityScheduling(List<Process> processes) {
        // Sort by arrival time and priority (lower priority number means higher priority)
        processes.sort(Comparator.comparingInt((Process p) -> p.arrivalTime)
                .thenComparingInt(p -> p.priority));
        int currentTime = 0;

        for (Process process : processes) {
            if (currentTime < process.arrivalTime) {
                currentTime = process.arrivalTime;
            }
            process.completionTime = currentTime + process.burstTime;
            currentTime = process.completionTime;
            process.turnaroundTime = process.completionTime - process.arrivalTime;
            process.waitingTime = process.turnaroundTime - process.burstTime;
        }

        return processes;
    }

    public static double[] calculateAverages(List<Process> processes) {
        double totalTurnaroundTime = 0, totalWaitingTime = 0;
        int n = processes.size();

        for (Process p : processes) {
            totalTurnaroundTime += p.turnaroundTime;
            totalWaitingTime += p.waitingTime;
        }

        double avgTurnaroundTime = totalTurnaroundTime / n;
        double avgWaitingTime = totalWaitingTime / n;

        return new double[]{avgTurnaroundTime, avgWaitingTime};
    }

    public static void displayResults(List<Process> processes, String algorithmName) {
        System.out.println("\n" + algorithmName + ":");
        System.out.printf("%-10s %-10s %-10s %-10s %-15s %-15s %-10s\n",
                "PID", "Arrival", "Burst", "Priority", "Completion", "Turnaround", "Waiting");

        for (Process process : processes) {
            System.out.printf("%-10d %-10d %-10d %-10d %-15d %-15d %-10d\n",
                    process.pid, process.arrivalTime, process.burstTime, process.priority,
                    process.completionTime, process.turnaroundTime, process.waitingTime);
        }

        double[] averages = calculateAverages(processes);
        System.out.printf("\nAverage Turnaround Time: %.2f\n", averages[0]);
        System.out.printf("Average Waiting Time: %.2f\n", averages[1]);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();
        List<Process> processes = new ArrayList<>();

        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter arrival time for process " + (i + 1) + ": ");
            int arrivalTime = scanner.nextInt();
            System.out.print("Enter burst time for process " + (i + 1) + ": ");
            int burstTime = scanner.nextInt();
            System.out.print("Enter priority for process " + (i + 1) + " (optional, enter 0 if not applicable): ");
            int priority = scanner.nextInt();

            processes.add(new Process(i + 1, arrivalTime, burstTime, priority));
        }

        List<Process> priorityResult = priorityScheduling(new ArrayList<>(processes));
        displayResults(priorityResult, "Priority Scheduling (Non-Preemptive)");
    }
}
